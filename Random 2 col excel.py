import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import random
import time

# T·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("Ch∆∞∆°ng tr√¨nh quay th∆∞·ªüng")
root.geometry("800x500")
root.configure(bg="black")

# Bi·∫øn to√†n c·ª•c
candidates_a = []
candidates_b = []
winners = {"A": set(), "B": set()}  # D√πng Set ƒë·ªÉ tr√°nh tr√πng
running = False

# T·∫°o Canvas ƒë·ªÉ hi·ªÉn th·ªã ph√°o hoa nh∆∞ng kh√¥ng che giao di·ªán
canvas = tk.Canvas(root, bg="black", highlightthickness=0)
canvas.place(x=0, y=0, relwidth=1, relheight=1)
canvas.lower("all")  # ƒê∆∞a canvas xu·ªëng d∆∞·ªõi

# H√†m t·∫£i danh s√°ch t·ª´ file Excel
def load_excel():
    global candidates_a, candidates_b
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
    
    if file_path:
        try:
            df = pd.read_excel(file_path)
            candidates_a = set(df.iloc[:, 0].dropna().tolist())  # D√πng set ƒë·ªÉ tr√°nh tr√πng
            candidates_b = set(df.iloc[:, 1].dropna().tolist())
            winners["A"].clear()
            winners["B"].clear()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ t·∫£i danh s√°ch th√†nh c√¥ng!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")

# H√†m t·∫°o ph√°o hoa
def create_firework():
    fireworks = []
    for _ in range(15):  # T·∫°o 15 tia s√°ng
        x, y = 400, 200  # V·ªã tr√≠ trung t√¢m ph√°o hoa
        dx, dy = random.randint(-8, 8), random.randint(-8, 8)  # H∆∞·ªõng b·∫Øn
        color = random.choice(["red", "yellow", "white", "blue", "purple", "orange"])
        particle = canvas.create_oval(x, y, x+6, y+6, fill=color, outline=color)
        fireworks.append((particle, dx, dy))

    animate_firework(fireworks)

def animate_firework(fireworks, step=0):
    if step > 20:  # Sau 20 b∆∞·ªõc th√¨ x√≥a ph√°o hoa
        for particle, _, _ in fireworks:
            canvas.delete(particle)
        return

    for particle, dx, dy in fireworks:
        canvas.move(particle, dx, dy)  # Di chuy·ªÉn t·ª´ng h·∫°t ph√°o hoa
    root.after(50, lambda: animate_firework(fireworks, step + 1))  # Ti·∫øp t·ª•c animation

# H√†m quay th∆∞·ªüng (KH√îNG CHO TR√ôNG)
def start_spin(category):
    global running

    if running:
        return

    candidates = candidates_a if category == "A" else candidates_b
    available_candidates = list(candidates - winners[category])  # L·ªçc ng∆∞·ªùi ch∆∞a tr√∫ng

    if not available_candidates:
        messagebox.showinfo("L·ªói", "T·∫•t c·∫£ ƒë√£ tr√∫ng th∆∞·ªüng!")
        return

    running = True

    for _ in range(30):  # Quay s·ªë ng·∫´u nhi√™n 30 l·∫ßn
        random_name = random.choice(available_candidates)
        result_label.config(text=random_name, fg="white", font=("Arial", 40, "bold"))
        root.update()
        time.sleep(0.1)

    winner = random.choice(available_candidates)
    winners[category].add(winner)  # L∆∞u v√†o danh s√°ch tr√∫ng th∆∞·ªüng

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi hi·ªáu ·ª©ng vi·ªÅn m√†u
    for _ in range(3):
        result_label.config(text=winner, fg="yellow", font=("Arial", 50, "bold"))
        result_frame.config(bg="gold")
        root.update()
        time.sleep(0.3)
        result_label.config(text=winner, fg="red", font=("Arial", 50, "bold"))
        result_frame.config(bg="red")
        root.update()
        time.sleep(0.3)

    result_frame.config(bg="goldenrod")  # Gi·ªØ khung vi·ªÅn sau khi ch·ªçn xong
    create_firework()  # K√≠ch ho·∫°t ph√°o hoa
    running = False

# H√†m l∆∞u danh s√°ch ng∆∞·ªùi tr√∫ng th∆∞·ªüng
def save_winners():
    file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                             filetypes=[("Text files", "*.txt")],
                                             title="L∆∞u danh s√°ch tr√∫ng th∆∞·ªüng")
    if file_path:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write("Danh s√°ch tr√∫ng th∆∞·ªüng:\n\n")
            f.write("üîµ Nh√≥m A:\n" + "\n".join(winners["A"]) + "\n\n")
            f.write("üî¥ Nh√≥m B:\n" + "\n".join(winners["B"]))
        messagebox.showinfo("L∆∞u th√†nh c√¥ng", f"Danh s√°ch ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i:\n{file_path}")

# H√†m hi·ªÉn th·ªã t·ªïng k·∫øt danh s√°ch tr√∫ng th∆∞·ªüng
def show_summary():
    summary_text = "üîµ Nh√≥m A:\n" + "\n".join(winners["A"]) + "\n\nüî¥ Nh√≥m B:\n" + "\n".join(winners["B"])
    messagebox.showinfo("T·ªïng k·∫øt", summary_text)

# Thi·∫øt k·∫ø giao di·ªán t·ªëi gi·∫£n
frame_controls = tk.Frame(root, bg="black")
frame_controls.pack(side="left", fill="y", padx=5, pady=5)

frame_display = tk.Frame(root, bg="black")
frame_display.pack(side="right", expand=True, fill="both")

# N√∫t t·∫£i file
btn_load = tk.Button(frame_controls, text="üìÇ", command=load_excel, font=("Arial", 12),
                     bg="#4CAF50", fg="white", padx=10, pady=5, width=2)
btn_load.pack(pady=3)

# N√∫t quay th∆∞·ªüng nh√≥m A
btn_spin_a = tk.Button(frame_controls, text="üîµ", command=lambda: start_spin("A"), font=("Arial", 12),
                       bg="blue", fg="white", padx=10, pady=5, width=2)
btn_spin_a.pack(pady=3)

# N√∫t quay th∆∞·ªüng nh√≥m B
btn_spin_b = tk.Button(frame_controls, text="üî¥", command=lambda: start_spin("B"), font=("Arial", 12),
                       bg="red", fg="white", padx=10, pady=5, width=2)
btn_spin_b.pack(pady=3)

# N√∫t t·ªïng k·∫øt
btn_summary = tk.Button(frame_controls, text="üìú", command=show_summary, font=("Arial", 12),
                        bg="gray", fg="white", padx=10, pady=5, width=2)
btn_summary.pack(pady=3)

# N√∫t l∆∞u k·∫øt qu·∫£
btn_save = tk.Button(frame_controls, text="üíæ", command=save_winners, font=("Arial", 12),
                     bg="purple", fg="white", padx=10, pady=5, width=2)
btn_save.pack(pady=3)

# Khung hi·ªÉn th·ªã k·∫øt qu·∫£
result_frame = tk.Frame(frame_display, bg="goldenrod", bd=5, relief="ridge")
result_frame.pack(expand=True, fill="both", padx=20, pady=20)

# Khu v·ª±c hi·ªÉn th·ªã k·∫øt qu·∫£
result_label = tk.Label(result_frame, text="ƒêang ch·ªù...", font=("Arial", 50, "bold"), bg="black", fg="white")
result_label.pack(expand=True, fill="both")

# Ch·∫°y ·ª©ng d·ª•ng
root.mainloop()
